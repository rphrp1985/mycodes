#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct edge{
  
  int e,w;
  
  
};

int main() 
{
   
   int n;
   cin>>n;
   vector<vector<struct edge>> v(n+1);
   int m;
   cin>>m;
   
   
   
   for(int i=0;i<m;i++)
   {
     int x,y,wie;
     
     cin>>x>>y>>wie;
    struct edge edg;
    edg.e=y;  edg.w=wie;
    v[x].push_back(edg);
    edg.e=x;
    v[y].push_back(edg);
    
   }
   
   
   vector<int> distance(n+1,INT_MAX);
   distance[1]=0;
   int vis[n+1]={};
   
   std::queue<int> q;
   q.push(1);
   
  while(!q.empty())
  {
    int x=q.front();
    q.pop();
     
     m= v[x].size();
     
    for(int j=0;j<m;j++){
      
      int temp= v[x][j].e;
      int dist=  distance[x]+ v[x][j].w;
      // cout<<x<<" "<<temp<<" "<<dist<<endl;
      if(distance[temp]>dist)
      {
      
      
        distance[temp]=dist;
        q.push(temp);
        
      }
    }
     
     
     
  }
   
   
  // for(int i=1;i<=n;i++)
  // std::cout << distance[i] <<" ";
   
   
   vector<vector<pair<int,int>>> vfinal(n+1);
   
   q.push(1);
   while(!q.empty())
   {
     int x= q.front();
     q.pop();
     
     m= v[x].size();
     for(int j=0;j<m;j++){
      
      int temp= v[x][j].e;
      int dist=  distance[x]+ v[x][j].w;
      // cout<<x<<" "<<temp<<" "<<dist<<endl;
      if(distance[temp]==dist)
      {
      
      
      vfinal[x].push_back(make_pair(temp,v[x][j].w ));
        // distance[temp]=dist;
        q.push(temp);
        
      }
    }
     
     
     
   }
   
   
   for(int i=1;i<=n;i++)
   {
     int m= vfinal[i].size();
     
     for(int j=0;j<m;j++)
     {
      cout<<i<<" "<<vfinal[i][j].first<<" "<<vfinal[i][j].second<<endl;
       
     }
     
     
     
   }
   
   
   
   
   
   
   
   
    return 0;
}
